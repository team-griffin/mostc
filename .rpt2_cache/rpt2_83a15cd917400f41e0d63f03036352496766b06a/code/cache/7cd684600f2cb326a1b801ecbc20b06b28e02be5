{"code":"import * as most from 'most';\r\nimport { curryN } from 'ramda';\r\n// @ts-ignore - curryN's type ironically is not curried (but the implementation is)\r\nconst curry2 = curryN(2);\r\n// @ts-ignore\r\nconst curry3 = curryN(3);\r\nexport const map = curry2(most.map);\r\nexport const chain = curry2(most.chain);\r\nexport const tap = curry2(most.tap);\r\nexport const filter = curry2(most.filter);\r\nexport const startWith = curry2(most.startWith);\r\nexport const concat = curry2(most.concat);\r\nexport const continueWith = curry2(most.continueWith);\r\nexport const concatMap = curry2(most.concatMap);\r\n// @ts-ignore - transduce is not typed\r\nexport const transduce = curry2(most.transduce);\r\nexport const slice = curry3(most.slice);\r\nexport const take = curry2(most.take);\r\nexport const skip = curry2(most.skip);\r\nexport const takeWhile = curry2(most.takeWhile);\r\nexport const skipWhile = curry2(most.skipWhile);\r\nexport const skipAfter = curry2(most.skipAfter);\r\nexport const until = curry2(most.until);\r\nexport const since = curry2(most.since);\r\nexport const during = curry2(most.during);\r\nexport const loop = curry3(most.loop);\r\nexport const reduce = curry3(most.reduce);\r\nexport const observe = curry2(most.observe);\r\nexport const delay = curry2(most.delay);\r\nexport const recoverWith = curry2(most.recoverWith);\r\nexport const merge = curry2(most.merge);\r\nexport const combine = curry2(most.combine);\r\n","references":["/home/jellis1/code/other/team-griffin/mostc/node_modules/most/type-definitions/most.d.ts","/home/jellis1/code/other/team-griffin/mostc/node_modules/@types/ramda/index.d.ts"],"dts":{"name":"/home/jellis1/code/other/team-griffin/mostc/index.d.ts","writeByteOrderMark":false,"text":"import * as most from 'most';\r\nimport { CurriedFunction2, CurriedFunction3 } from 'ramda';\r\nexport declare const map: CurriedFunction2<unknown, unknown, most.Stream<unknown>>;\r\nexport declare const chain: CurriedFunction2<unknown, unknown, most.Stream<unknown>>;\r\nexport declare const tap: CurriedFunction2<unknown, unknown, most.Stream<unknown>>;\r\nexport declare const filter: CurriedFunction2<(a: unknown) => boolean, most.Stream<unknown>, most.Stream<unknown>>;\r\nexport declare const startWith: CurriedFunction2<unknown, unknown, most.Stream<unknown>>;\r\nexport declare const concat: CurriedFunction2<unknown, unknown, most.Stream<unknown>>;\r\nexport declare const continueWith: CurriedFunction2<unknown, unknown, most.Stream<unknown>>;\r\nexport declare const concatMap: CurriedFunction2<unknown, unknown, most.Stream<unknown>>;\r\nexport declare const transduce: CurriedFunction2<unknown, unknown, unknown>;\r\nexport declare const slice: CurriedFunction3<unknown, unknown, unknown, most.Stream<unknown>>;\r\nexport declare const take: CurriedFunction2<unknown, unknown, most.Stream<unknown>>;\r\nexport declare const skip: CurriedFunction2<unknown, unknown, most.Stream<unknown>>;\r\nexport declare const takeWhile: CurriedFunction2<unknown, unknown, most.Stream<unknown>>;\r\nexport declare const skipWhile: CurriedFunction2<unknown, unknown, most.Stream<unknown>>;\r\nexport declare const skipAfter: CurriedFunction2<unknown, unknown, most.Stream<unknown>>;\r\nexport declare const until: CurriedFunction2<unknown, unknown, most.Stream<unknown>>;\r\nexport declare const since: CurriedFunction2<unknown, unknown, most.Stream<unknown>>;\r\nexport declare const during: CurriedFunction2<unknown, unknown, most.Stream<unknown>>;\r\nexport declare const loop: CurriedFunction3<unknown, unknown, unknown, most.Stream<unknown>>;\r\nexport declare const reduce: CurriedFunction3<unknown, unknown, unknown, Promise<unknown>>;\r\nexport declare const observe: CurriedFunction2<unknown, unknown, Promise<any>>;\r\nexport declare const delay: CurriedFunction2<unknown, unknown, most.Stream<unknown>>;\r\nexport declare const recoverWith: CurriedFunction2<unknown, unknown, most.Stream<unknown>>;\r\nexport declare const merge: CurriedFunction2<unknown, unknown, most.Stream<unknown>>;\r\nexport declare const combine: CurriedFunction2<(a: unknown, b: unknown, c: unknown, d: unknown, e: unknown) => unknown, most.Stream<unknown>, most.Stream<unknown>>;\r\n"}}
